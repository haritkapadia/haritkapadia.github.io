Principles of Recursion

Recursion is a strategy of solving problems that involves nested and repeated code, often through the use of functions. It is used to solve problems that contain smaller versions of themselves.

Recursion, like many programming principles, originates in mathematics and has been extended and expanded.

* Origin in Mathematics

In mathematics, a function \( f(x) \) is considered to be recursive if some transformation \( g(x) \) is applied to \( f(x) \) in its definition. For example, the function \( f(x) = 2 \cdot f(x - 1) \) is considered to be recursive as the function is used inside of its own definition. Additonally, functions often have base cases to ensure that the function can be evaluated. The previous function can be improved upon by transforming it into the following.

$$
  f(x) = \left\{
  \begin{array}{ll}
  1, & x = 0 \\
  2 \cdot f(x - 1), & x \gt 0 \\
  \end{array}
  \right.
$$

Expanding \( f(4) \) gives \( 2 \cdot f(3) \), which can be expanded further as: \( 2 \cdot f(3) = 2 \cdot 2 \cdot f(2) = 2 \cdot 2 \cdot 2 \cdot f(1) = 2 \cdot 2 \cdot 2 \cdot 2 \cdot f(0) = 16 \).

* Recursion in Programming

Recursion in programming is very similar to recursion in mathematics. Below is the previously created function, implemented in Java.


#+BEGIN_SRC java
  int f(int x) {
      if(x == 0)
          return 1;
      return 2 * f(x - 1);
  }
#+END_SRC

The example above shows how a mathematical recursive function can be implemented in a programming language. In this case, the piecewise component is analogous to an if statement. Both functions are undefined when \( x \lt 0 \).

* Tail-end Recursion

Programs often have a stack of memory allocated for them. When a function is called, the state of the current variables is stored and the function starts on a fresh slate. In recursive functions, a lot of space is taken up on the stack. However, many compiled languages can optimise recursion to be as efficient as any iterative solution, but for that the function must be tail-recursive.

A tail-recursive function is a function that ends its execution by returning only a value or only a function. The function created in the previous example is not tail-recursive due to the offending line below.

#+BEGIN_SRC java
      return 2 * f(x - 1);
#+END_SRC

To resolve this, the function can be modified as follows.

#+BEGIN_SRC java
  int f(int x, int out) {
      if(x == 0)
          return out;
      return f(x - 1, 2 * out);
  }
#+END_SRC

In the function above, a new parameter called ~out~ was created that would store the returned value. The function would have to be called as such: ~f(/*number*/, 1)~.

* Recursion in Programming

Recursion can make some problems very easy to approach. It makes code more expressive and allows problems to be solved using a divide and conquer strategy. Traversing a graph depth-first is often done recursively.
